name: Deploy Vaultwarden with Litestream

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Web Vault for Vaultwarden
        run: |
          # Get the browser download URL for the latest web-vault tarball asset from bw_web_builds
          WEB_VAULT_URL=$(curl -s "https://api.github.com/repos/dani-garcia/bw_web_builds/releases/latest" | \
            jq -r '.assets[] | select(.name | endswith("tar.gz")) | .browser_download_url')
          echo "Downloading Web Vault from: $WEB_VAULT_URL"
          # Download the tarball
          curl -L "$WEB_VAULT_URL" -o web-vault.tar.gz
          # Create a directory for the extracted web vault
          mkdir -p web-vault
          # Extract the tarball into the created directory.
          tar -xzvf web-vault.tar.gz -C web-vault
          pwd
          ls -la
          ls ./web-vault/ -la
            
      - name: Download latest Vaultwarden release
        run: |
          VAULTWARDEN_URL=$(curl -s https://api.github.com/repos/dani-garcia/vaultwarden/releases/latest | jq -r '.zipball_url')
          curl -L $VAULTWARDEN_URL -o vaultwarden.zip
          unzip vaultwarden.zip -d vaultwarden
          pwd
          ls -la
          ls ./vaultwarden/ -la

      - name: Generate Litestream configuration
        run: |
          cat <<EOF > litestream.yml
          dbs:
            - path: ${{ VAULTWARDEN_DATA_FOLDER }}/db.sqlite3
              replicas:
                - type: s3
                  bucket: "${{ vars.LITESTREAM_BUCKET }}"
                  path: db.sqlite3
                  endpoint: "${{ vars.LITESTREAM_ENDPOINT }}"
          EOF

      - name: Build Docker image
        run: |
          docker build -t vaultwarden-aws-apprunner-s3 .

      - name: Tag Image for DockerHub
        run: |
          docker tag vaultwarden-aws-apprunner-s3:latest ${{ secrets.DOCKERHUB_USERNAME }}/vaultwarden-aws-apprunner-s3:latest

      - name: Push to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/vaultwarden-aws-apprunner-s3:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Push Image to AWS ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: vaultwarden-aws-apprunner-s3
        run: |
          ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          # Tag the image for ECR
          docker tag vaultwarden-aws-apprunner-s3:latest ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          # Push the image to ECR
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest

      - name: Manually Update App Runner Service
        env:
          SERVICE_NAME: vaultwarden-apprunner
          ECR_IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/vaultwarden-aws-apprunner-s3:latest
        run: |
          aws apprunner update-service --service-arn $(aws apprunner list-services --query "ServiceSummaryList[?ServiceName=='$SERVICE_NAME'].ServiceArn" --output text) \
            --source-configuration ImageRepository="{ImageIdentifier=\"$ECR_IMAGE_URI\",ImageRepositoryType=\"ECR\"}"
